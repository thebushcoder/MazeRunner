/*
 * invulnerabilityComponent.hpp
 *
 *  Created on: 20 Jul 2018
 *      Author: linbob
 */

#ifndef LIBADO_ENTITY_SYSTEMS_INVULNERABILITYSYSTEM_HPP_
#define LIBADO_ENTITY_SYSTEMS_INVULNERABILITYSYSTEM_HPP_

#include <SFML/Window.hpp>
#include <SFML/Graphics.hpp>
#include <anax/System.hpp>

#include "../components/componentsCollection.hpp"

struct InvulnerabilitySystem : anax::System<anax::Requires<InvulnerabilityComponent>>{
	sf::Clock debug;

	InvulnerabilitySystem(){}

	void update(sf::Time& delta){
		debug.restart();

		for(auto e : getEntities()){
			InvulnerabilityComponent& iC = e.getComponent<InvulnerabilityComponent>();

			iC.elapsed += delta;

			if(iC.elapsed.asSeconds() >= iC.getMaxTime()){
				e.removeComponent<InvulnerabilityComponent>();
				e.removeComponent<ShaderComponent>();
				e.activate();
				continue;
			}

			ShaderComponent& shade = e.getComponent<ShaderComponent>();

			shade.getShader().setUniform("u_time", iC.elapsed.asSeconds());
		}
//		printf("InvulnerabilitySystem > debugTime: %f\n", debug.restart().asSeconds());
	}
};

#endif /* LIBADO_ENTITY_SYSTEMS_INVULNERABILITYSYSTEM_HPP_ */
